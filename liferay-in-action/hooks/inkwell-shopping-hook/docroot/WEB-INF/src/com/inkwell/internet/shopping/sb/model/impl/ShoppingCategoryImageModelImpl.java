/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inkwell.internet.shopping.sb.model.impl;

import com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage;
import com.inkwell.internet.shopping.sb.model.ShoppingCategoryImageModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the ShoppingCategoryImage service. Represents a row in the &quot;Inkwell_ShoppingCategoryImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.inkwell.internet.shopping.sb.model.ShoppingCategoryImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingCategoryImageImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a shopping category image model instance should use the {@link com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage} interface instead.
 * </p>
 *
 * @author Rich Sezov
 * @see ShoppingCategoryImageImpl
 * @see com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage
 * @see com.inkwell.internet.shopping.sb.model.ShoppingCategoryImageModel
 * @generated
 */
public class ShoppingCategoryImageModelImpl extends BaseModelImpl<ShoppingCategoryImage>
	implements ShoppingCategoryImageModel {
	public static final String TABLE_NAME = "Inkwell_ShoppingCategoryImage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "imageId", new Integer(Types.BIGINT) },
			{ "categoryId", new Integer(Types.BIGINT) },
			{ "imageUrl", new Integer(Types.VARCHAR) }
		};
	public static final String TABLE_SQL_CREATE = "create table Inkwell_ShoppingCategoryImage (imageId LONG not null primary key,categoryId LONG,imageUrl STRING null)";
	public static final String TABLE_SQL_DROP = "drop table Inkwell_ShoppingCategoryImage";
	public static final String ORDER_BY_JPQL = " ORDER BY shoppingCategoryImage.imageUrl ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Inkwell_ShoppingCategoryImage.imageUrl ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage"));

	public ShoppingCategoryImageModelImpl() {
	}

	public long getPrimaryKey() {
		return _imageId;
	}

	public void setPrimaryKey(long pk) {
		setImageId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_imageId);
	}

	public long getImageId() {
		return _imageId;
	}

	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	public long getCategoryId() {
		return _categoryId;
	}

	public void setCategoryId(long categoryId) {
		_categoryId = categoryId;
	}

	public String getImageUrl() {
		if (_imageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUrl;
		}
	}

	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	public ShoppingCategoryImage toEscapedModel() {
		if (isEscapedModel()) {
			return (ShoppingCategoryImage)this;
		}
		else {
			return (ShoppingCategoryImage)Proxy.newProxyInstance(ShoppingCategoryImage.class.getClassLoader(),
				new Class[] { ShoppingCategoryImage.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					ShoppingCategoryImage.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		ShoppingCategoryImageImpl shoppingCategoryImageImpl = new ShoppingCategoryImageImpl();

		shoppingCategoryImageImpl.setImageId(getImageId());

		shoppingCategoryImageImpl.setCategoryId(getCategoryId());

		shoppingCategoryImageImpl.setImageUrl(getImageUrl());

		return shoppingCategoryImageImpl;
	}

	public int compareTo(ShoppingCategoryImage shoppingCategoryImage) {
		int value = 0;

		value = getImageUrl().compareTo(shoppingCategoryImage.getImageUrl());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ShoppingCategoryImage shoppingCategoryImage = null;

		try {
			shoppingCategoryImage = (ShoppingCategoryImage)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = shoppingCategoryImage.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{imageId=");
		sb.append(getImageId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", imageUrl=");
		sb.append(getImageUrl());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"com.inkwell.internet.shopping.sb.model.ShoppingCategoryImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUrl</column-name><column-value><![CDATA[");
		sb.append(getImageUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _imageId;
	private long _categoryId;
	private String _imageUrl;
	private transient ExpandoBridge _expandoBridge;
}